const si = require('../../')
const { EntryStream } = require('level-read-stream')
const test = require('tape')

const sandbox = 'test/sandbox/'
const testIndex = sandbox + 'stopword-test'

const data = [
  'this is a giant banana',
  'this is a giant pineapple',
  'this is a small pineapple'
]

const autoGeneratedIds = []

test('create a case sensitive search index', t => {
  t.plan(1)
  si({
    name: testIndex,
    stopwords: ['this', 'is', 'a', 'small']
  }).then(db => {
    global[testIndex] = db
    t.pass('ok')
  })
})

test('can add data to case sensitive index', t => {
  t.plan(9)
  global[testIndex].PUT(data).then(response =>
    response.forEach(item => {
      t.equals(item.operation, 'PUT')
      t.equals(item.status, 'CREATED')
      t.match(item._id, /\d{13}-\d/gm, 'id has correct format')
      autoGeneratedIds.push(item._id)
    })
  )
})

test('verify index structure', t => {
  const expectedIndexStructure = [
    {
      key: ['CREATED_WITH'],
      value: 'search-index@' + require('../../package.json').version
    },
    {
      key: ['DOC', autoGeneratedIds[0]],
      value: {
        body: [
          ['banana', '1.00'],
          ['giant', '1.00']
        ],
        _id: autoGeneratedIds[0]
      }
    },
    {
      key: ['DOC', autoGeneratedIds[1]],
      value: {
        body: [
          ['giant', '1.00'],
          ['pineapple', '1.00']
        ],
        _id: autoGeneratedIds[1]
      }
    },
    {
      key: ['DOC', autoGeneratedIds[2]],
      value: { body: [['pineapple', '1.00']], _id: autoGeneratedIds[2] }
    },
    { key: ['DOCUMENT_COUNT'], value: 3 },
    {
      key: ['DOC_RAW', autoGeneratedIds[0]],
      value: 'this is a giant banana'
    },
    {
      key: ['DOC_RAW', autoGeneratedIds[1]],
      value: 'this is a giant pineapple'
    },
    {
      key: ['DOC_RAW', autoGeneratedIds[2]],
      value: 'this is a small pineapple'
    },
    { key: ['FIELD', 'body'], value: 'body' },
    {
      key: ['IDX', 'body', ['banana', '1.00']],
      value: [autoGeneratedIds[0]]
    },
    {
      key: ['IDX', 'body', ['giant', '1.00']],
      value: [autoGeneratedIds[0], autoGeneratedIds[1]]
    },
    {
      key: ['IDX', 'body', ['pineapple', '1.00']],
      value: [autoGeneratedIds[1], autoGeneratedIds[2]]
    }
  ]
  t.plan(expectedIndexStructure.length)
  new EntryStream(global[testIndex].INDEX.STORE, { lt: ['~'], ...global[testIndex].INDEX.LEVEL_OPTIONS }).on(
    'data',
    d => {
      t.deepEquals(d, expectedIndexStructure.shift())
    }
  )
})

// TODO: these tests need to be fixed! Stopwords dont work!

test('search with stopwords', t => {
  t.plan(1)
  global[testIndex]
    .QUERY({
      AND: 'this is a small banana'.split(' ')
    })
    .then(res => {
      t.deepEqual(res, {
        RESULT: [
          {
            _id: autoGeneratedIds[0],
            _match: [{ FIELD: 'body', VALUE: 'banana', SCORE: '1.00' }]
          }
        ],
        RESULT_LENGTH: 1
      })
    })
})

test('search with stopwords', t => {
  t.plan(1)
  global[testIndex]
    .QUERY({
      AND: [
        {
          VALUE: 'this'
        },
        {
          VALUE: 'banana'
        }
      ]
    })
    .then(res => {
      t.deepEqual(res, {
        RESULT: [
          {
            _id: autoGeneratedIds[0],
            _match: [{ FIELD: 'body', VALUE: 'banana', SCORE: '1.00' }]
          }
        ],
        RESULT_LENGTH: 1
      })
    })
})
